{"id":"ejercicios/callapplybind.html","dependencies":[{"name":"/Users/saaib/Documents/Dev/MediaPlayer/package.json","includedInParent":true,"mtime":1596000178698}],"generated":{"html":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>Call, Apply, Bind</title>\n</head>\n<body>\n  <a href=\"/ejercicios/\">Go back</a>\n  <p><em>Abre la consola</em></p>\n\n\n  <ul>\n    <li><button class=\"btn\">Aprende</button></li>\n    <li><button class=\"btn\">Aprende M치s</button></li>\n    <li><button class=\"btn\">Aprende M치s Mucho M치s</button></li>\n  </ul>\n  <script>//funcion cualquiera que en realidad no tiene this\nfunction saludar() {\n  console.log(\"Hola soy \".concat(this.name, \" \").concat(this.last));\n} //un objeto cualquiera que puede ser tu instancia ;)\n\n\nvar adrian = {\n  name: 'Adrian',\n  last: 'Garcia'\n}; //corre la funcion y declaras la el objeto adrian como instancia\n\nsaludar.call(adrian); //ahora otra funcion con argumentos y this\n\nfunction saludarMas(cantidad, cosa) {\n  console.log('Soy', this.name, 'y tengo', cantidad, cosa);\n} //con call se manda la instacia y los argumentos que quieras con coma\n\n\nsaludarMas.call(adrian, 12, 'casas'); //con apply se manda la instacia, coma, y los argumentos que quieras en un array\n\nsaludarMas.apply(adrian, [3, 'camellos']); //bind no ejecuta la funcion\n// crea una funcion (la que es llamada) con el objeto instanciado\n\nvar saludarBind = saludarMas.bind(adrian, 3, \"pc's\");\nconsole.log(saludarBind); //despues ejecutas la funcion\n// puedes mandar argumentos donde quieras\n\nvar saludarBind2 = saludarMas.bind(adrian, 3);\nsaludarBind2(\"pc's\"); //despues ejecutas la funcion\n\n/* ejemplo para establecer otro this\ntienes 3 botones y a todos quieres darles el evento onclick \ny obtener el mismo resultado, un alert que diga perfecto\nesto mediante la funcion que saque el alert\n*/\n//obtienes todos los botones por su classname\n\nvar buttons = document.getElementsByClassName('btn');\n\nfunction sacaAlert() {\n  alert('perfecto');\n} //y decides darles el onclick por medio de un foreach\n\n/*buttons.forEach(button => {\n  button.onclick = () => alert('perfecto')\n});*/\n// esto tiene un peque침o problema y es que buttons no es un array, \n// buttons es un node list\n//pero si usas el console.log te saldra que es un HTMLCollection\n\n\nconsole.log(buttons); //mediante esto podemos ver que tienen una propiedad llamada lenght\n// y esto es suficiente para poder darle el this de la instancia array\n// que la instancia array existe por defecto en el navegador\n//llama al forEach mediante el prototype de Array \n// y se asigna el contexto mediante buttons\n// con esto simulamos que buttons es this y su metodo inmediato \n//crea el foreach para cada button\n\nArray.prototype.forEach.call(buttons, function (button) {\n  button.onclick = function () {\n    return sacaAlert();\n  };\n}); //otra manera\n\n/*const btns = [...buttons]\nbtns.forEach(button => {\n  button.onclick = () => sacaAlert()\n})*/\n//otra manera\n\n/*Object.values(buttons).forEach(element => {\n  element.onclick = () => alert('perfecto')\n});*/\n\n/*Array.from(buttons).forEach(element=>{\n  element.onclick = () => alert('perfecto')\n})*/</script>\n</body>\n</html>"},"sourceMaps":null,"error":null,"hash":"354393d0e886cac5ff7313f1effa092b","cacheData":{"env":{}}}