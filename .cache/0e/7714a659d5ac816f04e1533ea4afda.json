{"id":"ejercicios/generator.html","dependencies":[{"name":"/Users/saaib/Documents/Dev/MediaPlayer/package.json","includedInParent":true,"mtime":1596000178698}],"generated":{"html":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>Generator</title>\n</head>\n<body>\n  <a href=\"/ejercicios/\">Go back</a>\n  <p><em>Abre la consola</em></p>\n\n  <script>var _marked = /*#__PURE__*/regeneratorRuntime.mark(simpleGenerator),\n    _marked2 = /*#__PURE__*/regeneratorRuntime.mark(idmaker),\n    _marked3 = /*#__PURE__*/regeneratorRuntime.mark(idmakerwithreset),\n    _marked4 = /*#__PURE__*/regeneratorRuntime.mark(fibonacci);\n\n/*generador\n    los generadores no son ejecutables de por si, \n    se debe asignar y despues ejecutar con su metodo next\n    */\nfunction simpleGenerator() {\n  return regeneratorRuntime.wrap(function simpleGenerator$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          console.log('start');\n          _context.next = 3;\n          return;\n\n        case 3:\n          //es como el return \n          console.log('end');\n          _context.next = 6;\n          return 1;\n\n        case 6:\n          //yield tambien regresa valores, \n          console.log('other');\n\n        case 7:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n}\n\nvar simple = simpleGenerator(); //simple.next() //execute \n\n/*generador idMaker*/\n\nfunction idmaker() {\n  var id;\n  return regeneratorRuntime.wrap(function idmaker$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          id = 1;\n\n        case 1:\n          if (!true) {\n            _context2.next = 7;\n            break;\n          }\n\n          _context2.next = 4;\n          return id;\n\n        case 4:\n          //regresa el actual id \n          id = id + 1;\n          _context2.next = 1;\n          break;\n\n        case 7:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nvar idgen = idmaker();\n/*generador idmakerwithreset*/\n\nfunction idmakerwithreset() {\n  var id, reset;\n  return regeneratorRuntime.wrap(function idmakerwithreset$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          id = 0;\n\n        case 1:\n          if (!true) {\n            _context3.next = 8;\n            break;\n          }\n\n          _context3.next = 4;\n          return id;\n\n        case 4:\n          reset = _context3.sent;\n          reset ? id = 0 : id = id + 1;\n          _context3.next = 1;\n          break;\n\n        case 8:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}\n\nvar idres = idmakerwithreset();\n/*generador fibonacci*/\n\nfunction fibonacci() {\n  var a, b, nextNumber;\n  return regeneratorRuntime.wrap(function fibonacci$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          a = 1;\n          _context4.next = 3;\n          return a;\n\n        case 3:\n          b = 1;\n          _context4.next = 6;\n          return b;\n\n        case 6:\n          if (!true) {\n            _context4.next = 14;\n            break;\n          }\n\n          nextNumber = a + b;\n          a = b;\n          b = nextNumber;\n          _context4.next = 12;\n          return nextNumber;\n\n        case 12:\n          _context4.next = 6;\n          break;\n\n        case 14:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nvar fibo = fibonacci();</script>\n</body>\n</html>"},"sourceMaps":null,"error":null,"hash":"91f5001fc7996592731ae4a095f72d8d","cacheData":{"env":{}}}