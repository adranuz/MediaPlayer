{"id":"ejercicios/closure.html","dependencies":[{"name":"/Users/saaib/Documents/Dev/MediaPlayer/package.json","includedInParent":true,"mtime":1596000178698}],"generated":{"html":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>Closure</title>\n</head>\n<body>\n  <a href=\"/ejercicios/\">Go back</a>\n  <p><em>Abre la consola</em></p>\n\n  <script>/*---IFEE*/\n//el problema aqui es que la funcion esta en el scope global y si escribimos en conosola color nos regresa el valor\n\n/*let color = \"green\"\nfunction printColor() {\n  console.log(color)\n}\nprintColor()*/\n//Esto se usaba antes del ES5\n//por esto creamos una funcion que se va a llamar automaticamente\n//esto se llama IIFE (Inmediately Invoce Function Expression)\n//la variable color solo existe en la funcion que se corrio automaticamente\n(function () {\n  var color = \"green\";\n\n  function printColor() {\n    console.log(color);\n  }\n\n  printColor();\n})();\n/*---Funciones que regresan funciones*/\n//closures son el manejo de funciones por medio del scope\n\n\nfunction makeColorPrinter(color) {\n  var colorMessage = \"the color is \".concat(color);\n  return function () {\n    //retornamos una \n    console.log(colorMessage);\n  };\n}\n\nvar greenColorPrinter = makeColorPrinter(\"green\");\ngreenColorPrinter(); //lo que en realidad es greenColorPrinter es una funcion por lo que hay que ejecutarlo si queremos obtener el mensaje como respuesta\n\n/*---Variables privadas*/\n\n/*const counter = {\n  count: 3,\n}\nconsole.log(counter.count) //no quiero que nadie tenga acceso a este valor\n*/\n//el valor de una funcion no se puede leer directamente \n\nfunction makeCounter(n) {\n  var count = n;\n  return {\n    increase: function increase() {\n      4;\n      return count = count + 1;\n    },\n    decrease: function decrease() {\n      return count;\n    },\n    getCount: function getCount() {\n      return count = n;\n    }\n  };\n}\n\nvar counter = makeCounter(7);\nconsole.log(counter.increase());\nconsole.log(counter);</script>\n</body>\n</html>"},"sourceMaps":null,"error":null,"hash":"2b4fb1f51fe21f920fecec118ce9d9d7","cacheData":{"env":{}}}